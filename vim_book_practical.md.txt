# Practical Vim
Drew Neil

Vimcasts.org
(
Tips: use dot, dont repeat yslf, make changes repeatable, repeat substit with '&'
-> Tpope unimpaired mapping (buffer, arg, quickfix, tags..)
:compiler, :make, :shell, :version
omap option : custom map
:set shiftwidth=4 softtabstop=4 expandtab​ (tab as 4 spaces)
Tips : remape Capslock to Esc or Ctrl
https://vimhelp.org/pi_netrw.txt.html#netrw-ref (net protocols)  
https://vimhelp.org/map.txt.html#map-modes (map)  

Ref:  
https://vimhelp.org/index.txt.html#%5B [braquets]
https://vimhelp.org/motion.txt.html  

Objets:  
https://vimhelp.org/motion.txt.html#WORD
https://vimhelp.org/motion.txt.html#text-objects
)  

. repeat last change
*, # (search exact word)
g*, g# (search into word)
>G indent all until eof
s <=> cl, S <=> ^C or cc, I <=> ^i
gUgU or gU : lower current line
gUap (upper all paragraph)
gc<motion> or gcc : comment (gcae comment file)
= (autoindent)
K : look man page
gr, gR : virtual replace mode
c<motion> : change selection
C-D, C-U : pgup, pgdown
3G go line 3


zt, z<Enter> (center window with cursor on top)
zz, z. (center window on cursor)
zb, z- (center window cursor on bottom)
ZZ <=> :x (write buffer and exit)
ZQ <=> :q!

--- Insert mode ---
(Select mode: gh, gH, gC-h)
(Select mode: C-g> switch to Visual) 

13 correct in insert
(Delete only what was inserted, not existing text!)
C-h, C-w, C-u> : delete back char, word, line

14 (InsertNormal) get back to normal
C-o>{cmd} : fire one Normal command then switch to Insert
C-o>zz : middle the screen then Insert

15 past from register
(C-r is register in Insert mode)
C-r>0 : yank from register 0 by char
C-r>C-p>0 : yank all line from 0

16 expression
C-r>= : expression register then CR> to apply (C-r>6*35CR>)

17 unusual char
C-v> : char by ord (C-v>065 donne 'A')
C-v>u00bf as unicode
C-v>nondigit (ex Tab)
C-k>char1char2 with :digraph
ga : get unicode char of current word

18 replace mode
gr,gR replace in virtual mode (tab as space)

--- Visual --- v,V,C-v
gv : reselect last visual
o : toggle the free end
Vr- : replace line with -
C-g : toggle select mode (typing switch to insert mode)

--- Command --- 
https://vimhelp.org/cmdline.txt.html#cmdline-special


27 (Normal on current, Command on long range)
(C-w or C-u delete to start word/line)
(C-v or C-k insert unusual char)

28 use range
:1,20delete x : range to register x
:1,20yank x
:20put x : line to reg x

29 duplicate or move
:1,20copy <addr> (:1,10t0) 'co' or 't'
(:t. eq to yyp)
:6G yy C-o p => :6t.
:1,20move <addr> (:m)
(visu dGp equi to :m$)
:1,20join

30 Execute normal command 
:1,20normal <command> (e.g. '.')
:%normal A;
:%normal i//
:1,20substitute/pattern/string/flag
:1,20global/pattern/<command>
:edit,write,split,prev,next,bp(rev),bn(ext),c(opy)next,tnext

:p or :print line in command
:$ end of file
:3p go line3 then print
(3G-dd => :3d)
:.,$ current line to eofile
:%y all lines yanked (equiv :1,$y)

Visualselection: e.g. 2G-VG then ':'
:'<,'> from to visual selection
:pattern,pattern (:<html+1,\/html>-1y)
:.,.+3 current to plus3
:'m (to mark)
C-o reverse last command
u : undo

31 last
@: repeat last ex cmd

32 autocomplete
C-d or Tab : reveal autocompletion
:tab,set,help

:command-complete
:wildmode=longest,list (bashlike)
:wildmode :wildmode=full (zsh)

Navigate with Tab, C-n, C-p, left, right

33 insert current word at prompt
C-rC-w copy current word to prompt
:* then cw <newtype>
:%s//C-rC-w/g

34 recall cmd from hist
(With up and down)
.vimrc Set history=200
(Use with search too)

Cmdline history window:
(e.g. :write | !ruby %) 
% is current filename
q: (or in cmd type C-f) => cmdwin
q/ cmdline search

35 run cmd in shell
:! Run shell cmd (not :ls)
:ls show buffer commands
:shell
Or run C-z, jobs, fg (switch to vim)

:read <cmd> place cmd in buffer
:write cmd (put in buffer)
:write !sh (buffer to sh)
:write! sh (override "sh" file)

:2,$!sort -t',' -k2 (filter range on key2)
:range!

e.g. !G => open Ex with range
:1,4write !cmd
:1,4!<filter>

36 run multiple as batch, example:
(<ol><a href="myurl.com">txt</a></ol>)

global/href/j(oin)
vglobal/href/d(el)
%normal A: http://vimcasts.org
%normal yi"$p
:%substitute/\v^[^\>]+\>\s//g

(remove the opening <a href=""> tag)
then put cmds history in batch.vim

:source batch.vim (run all cmds)
$ vim *.html (every files in args)

:args (show all)
:first, :source batch.vim, :next...
:argdo source batch.vim

37 files in buffer
$ vim *.txt
:ls (list buffers)
:bn(ext)
C-^ (alt %current and #alt)

:buffer N
:buffer <"bufname firstchars">
:bufdo <cmd>
:bd(elete) N,M,O
:N,Mbd(elete)

38 buffer collection
:args **/*.js **/*.css
:args `cat myfile.txt` 

39 hidden files (unsaved)
set hidden (use ! for all)
:bn(ext)! or :bufdo
:e(dit)!
:qa(ll)!
:wa(ll)! or :argdo write
:wn
:cnext or :cfdo

40 ---windows--- (viewport of buffer)
C-w>s or v (horiz or vert)
:edit <file>
Or :sp(lit) <file> or :vsp file
C-w>(C-again)whjkl
:cl(ose), :on(ly)

Resize (->windows-moving)
C-w>=_| (maxi)
N C-w>_|

41 ---tabs--- (multi windows)
:tabnew
:lcd <path> (set current work dir)
:windo lcd <path> (all dir)
:tabe(dit) <file>

C-w>T move to new tab
:close
:tabc(lose)
:tabo(nly)
:tabn(ext) N or Ngt, or gt
:tabp(rev) or gT
:tabmove N (0 or empty->end)

42 open save files
:pwd
:edit <Tab><Tab>...
:edit %<Tab> (% use active buffer path)
:edit %:h <Tab> (remove filename)

```
' (map %% as %:h) 
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'
```
(Use :edit, :write, :saveas, :read)

43 find a file
:set path+=app/**
(See Tim Pope rails.vim)
:find Main.js<Tab> (use wildmode)

44 filesystem netrw
https://vimhelp.org/pi_netrw.txt.html#netrw-%2525

```
Set nocompatible
Filetype plugin on
```

vim .
:e(dit) . or :e.
:E(xplore), :Sexplore, :Vexplore
C-^ switch back to buffer
% create new file, d directory
rename, del
sftp, scp, curl...

45 save nonexists
C-g (echo name n stats of current file)
:edit <non-exists-dir>
:!mkdir -p %:h
:write

46 save as root
C-g (show readonly)
(Write buffer to current file: )
:w !sudo tee % > /dev/null

48 real vs display line
set wrap
gj/gk  go up/down on display line
g0 first display char
g^ first display non-blank
g$ end of display

49 word motion
(word = alpha-digit-_ or nonblank)
w,b,e,ge
(WORD = nonblank sep by whitespace)
W,B,E,gE

52 text-objects (block)
wWspt (word, sentence, paragraph, tag)
(e.g: vi} a" i> a`) expand more and more
cit (jumps to next tag and change it)

54 marks
ma..mz mark in local buffer
mA..mZ mark globally
'{mark} go to mark line
`{mark} go to mark position

Automarks (use ')
' last jump
. last change
^ last insert
[ start of last change or yank
] end of c or y
< start of visual
> end of v

55 jump parenthesis
(Plugin matchit.vim, surround.vim)
% switch matching one
`` or C-o (jump to last position)
e.g. f[ -> % -> r) -> `` -> r(

```
Set nocompatible
Filetype plugin on
runtime macros/matchit.vim
```

56 jumps list
(Motion within file, jumps between files)
C-o jump list backware
C-i jump forward
:jumps

Are jumps :
[count]G, /search, %, ), }, HML, 'marks
gf jump to filename
C-] jump to definition

Caution : In Insert, C-i = <Tab>

57 changes list
u / C-r
:changes
g; / g,
`. (go to last change)
`^ (go on last change in insert mode)
gi (use ^ mark then use insert mode)

58 jumps to filename
vim -u NONE - N <file> (no plugin)
gf (go to file)
(for input "require" TS modules)
:set suffixesadd+=.tsx
C-o (go back)
:set path? (See list)
C-] (go to method definition)


:grep
:vimgrep /foo/ **

60 yank paste, unnamed register
" is the unnamed (default) register""p => p(used with x,s,d,c,y)
xp, ddp
(Black hole register: "_)
"_dw (really delete word)

61 named register
"<reg>cmd (e.g. "ad):cmd <reg> (e.g. :put c)"ayy, "ap(Yank register: 0)yiw, "0p:reg "0 (display it)
Uppercase append(Sample used with)"ayiw, => Sample, w"Ayiw => Sample used)"_dw (blackhole register)"= (expression register)
Clipboard "+ or "*(e.g. Win Ctrl-c, Vim "+p or C-r>+)"+yit (copy to clipboard)

ReadOnly registers"% file, "# alt, ". insert, ": ex cmd, %/ search
